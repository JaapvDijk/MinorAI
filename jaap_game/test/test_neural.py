from sklearn.neural_network import MLPClassifier

class NeuralNet(object):
    def __init__(self):
        self.X = [
            #links
            [10,1,3,2,3],
            [9,1,3,2,1],
            [8,1,3,5,1],
            [7,1,3,3,2],
            [6,1,3,4,1],
            [5,1,1,3,1],
            [4,1,2,2,1],
            [3,1,3,1,1],
            [2,1,3,1,1],
            [10,6,3,3,2],
            [9,7,3,2,3],
            [8,8,3,4,2],
            [7,5,3,3,2],
            [6,4,3,2,1],
            [5,3,3,1,1],
            [4,2,3,1,1],
            [3,3,3,1,1],
            [2,4,3,1,1],
            [10,6,3,2,1],
            [9,7,3,1,2],
            [8,8,3,3,1],
            [7,5,2,1,1],
            [6,5,3,2,1],
            [5,4,2,1,2],
            [4,3,3,1,1],
            [3,5,1,1,2],
            [5,3,3,9,1],
            [3,5,3,1,2],
            [2,2,3,1,3],
            [3,3,3,1,2],
            [3,5,1,2,2],
            [3,4,9,1,2],
            
            


            #rechtdoor
            [1,1,10,1,1],
            [1,1,9,1,1],
            [1,1,8,1,1],
            [1,1,6,1,1],
            [1,1,3,1,1],
            [1,2,3,2,1],
            [1,3,5,3,2],
            [1,3,8,2,1],
            [1,2,10,1,2],
            [3,3,9,1,3],
            #[1,4,9,4,5]


            # [1,1,7,1,1],
            # [1,1,6,1,1],
            # [1,1,5,1,1],
            # [1,1,4,1,1],

            #rechts
            [1,2,3,3,4],
            [2,1,3,4,5],
            [1,3,3,4,5],
            [2,3,4,5,6],
            [1,3,5,5,6],
            [2,1,3,4,5],
            [1,2,2,4,4],
            [2,2,3,6,7],
            [1,2,3,5,6],
            [1,3,4,6,5],
            [1,1,2,4,3],
            [1,1,3,3,4],
            [1,1,5,3,3],
            [1,2,3,4,5],
            [2,2,3,4,4],
            [3,1,2,6,9],
            [1,1,2,2,4],
            

            

            

            #rechts rechtdoor
            [1,2,4,5,4],
            [3,2,5,6,5],
            [1,1,6,6,4],
            [1,2,7,7,5],
            [2,1,8,7,6],
            [3,4,9,5,4],
            [3,4,4,6,5],
            [3,3,4,6,4],
            [3,2,4,7,5],
            [4,2,5,7,6],
            [2,9,7,4,8],
            

            #links rechtdoor
            [4,5,4,2,1],
            [5,6,5,3,2],
            [4,6,6,1,1],
            [5,7,7,2,1],
            [6,7,8,1,2],
            [3,5,7,3,2],
            [3,4,9,2,3],
            
            # [2,5,10,19,4],
            # [2,8,10,19,4],
            # [1,1,10,19,10],
            # [1,1,10,17,10],
            # [1,1,10,16,10],
            # [1,1,10,15,10],
            # [1,1,10,14,10],
            # [1,1,10,13,10],
            # [1,1,10,12,10],
            # [1,1,10,10,10],
            # [1,1,5,19,5],
            # [1,1,5,18,5],
            # [1,1,5,15,5],
            # [1,1,5,10,5],
            # [1,1,5,9,5],
            # [1,1,5,8,5],
            # [1,1,5,7,5],
            # [1,1,5,5,5],

            # [1,1,6,2,2],
            # [2,2,7,3,3],
            # [3,3,5,4,4],
            # [3,3,10,6,6],
            # [9,9,11,10,10],
            # [1,2,11,3,3],
            # [1,2,12,3,4],

            
            #links rechtdoor
            # [10,19,10,1,1],
            # [10,17,10,1,1],
            # [10,16,10,1,1],
            # [10,15,10,1,1],
            # [10,14,10,1,1],
            # [10,13,10,1,1],
            # [10,12,10,1,1],
            # [10,10,10,1,1],
            # [5,19,5,1,1],
            # [5,18,5,1,1],
            # [5,15,5,1,1],
            # [5,10,5,1,1],
            # [5,9,5,1,1],
            # [5,8,5,1,1],
            # [5,7,5,1,1],
            # [5,5,5,1,1],

            # [2,2,6,1,1],
            # [3,3,7,2,2],
            # [4,4,5,3,3],
            # [6,6,10,3,3],
            # [10,10,11,9,9],
            # [3,3,11,1,2],
            # [3,4,12,1,2],

           

            
        ]

        self.y = [
            #links
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            [1,0,0],
            


            #rechtdoor
            [0, 1, 0],
            [0, 1, 0],
            [0, 1, 0],
            [0, 1, 0],
            [0, 1, 0],
            [0, 1, 0],
            [0, 1, 0],
            [0, 1, 0],
            [0, 1, 0],
            [0, 1, 0],
            
            
            #rechts
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],
            [0, 0, 1],


            #rechts rechtdoor
            [0, 1, 1],
            [0, 1, 1],
            [0, 1, 1],
            [0, 1, 1],
            [0, 1, 1],
            [0, 1, 1],
            [0, 1, 1],
            [0, 1, 1],
            [0, 1, 1],
            [0, 1, 1],
            [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            # [0, 1, 1],
            
            #links rechtdoor
            [1, 1, 0],
            [1, 1, 0],
            [1, 1, 0],
            [1, 1, 0],
            [1, 1, 0],
            [1, 1, 0],
            [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
            # [1, 1, 0],
        ]
    def train(self):
        self.clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(15,), random_state=1)
        self.clf.fit(self.X, self.y)
        print(self.clf.score(self.X,self.y))

    def predict(self, arm_vel_input):
        print(arm_vel_input)
        y_pred_prob_nn = self.clf.predict(arm_vel_input)
        print(y_pred_prob_nn)
        return y_pred_prob_nn[0]


              
